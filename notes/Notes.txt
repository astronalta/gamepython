JOGO


Need a tree expander:
    refcount in assignment operator expansion
        (indeed. why not do this right away in the parser?)
        (option: put 'real node' in tree, but give it an 'expansion' property)
        (why not do this right in the code generator?)
    fill in binary logic ops
        (hrm, no just do it by default)
        (what about bool primitives?)
        (no, that's ok, no compare ops for bools)
    expand binary ops to method calls if not primitive
        (no, switch on @ + prim type)
        (also, once 'inlined' functions work, this is OK?)
        (no, not really because inlined != assembly)
    convert for loop to while loop (syntactic sugar)
        (why not do this right away in the parser)
    
Want to keep the tree as close as possible to the actual
parse tree (for refactoring tools to work properly?)

Actually refactoring tools will be fine...as long as the identifier
locations are kept the same.
import Struct, File, Socket, Algo, Prelude


test() {
    let fd = File::Handle("Hello, world!") {
    }

    let sd = Socket::Stream("Hello, world!") {
    }

    sockets = Hash[String, Socket::Stream]()
    sockets = Hash[String, Socket::Stream]()
}



# Import Options:
# 1. Java-style: FQN or short name, auto-load FQNs, import = alias, not hierarchical
# 2. Python: No auto-import, import from = alias and insert, import = load, hierarchical
# 3. Dir-style: Import all files in dir, import = load, pkg name = dirname
# 4. Mixed-style: Import all files if dir, import single file if name, import = load
# 5. Haskell-style: Import qualified, import
# 6. Ruby-style: Import only = filename, namespace must be in class name
# 7. C++-style: Import only = filename, namespace must be in class name

# 'import qualified' or 'include' = load only (only #include)
# 'import' = load and insert into current namespace (#include + using)
# Package name = dir name, file name doesn't matter (ok that there's mult. files)
# Have compiler skip emitting unused code.  SOLVED.
# Discover module name by getting 2nd to last path segment. 
