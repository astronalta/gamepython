import Boot


TestObject < Object {

    num private Int

    @init(number Int) {
        num = number
        boot_print_str('alloc: ')
        boot_print_int(num)
        boot_print_str('\n')
    }

    @destroy() {
        boot_print_str('free: ')
        boot_print_int(num)
        boot_print_str('\n')
    }
}

TestInterface < Interface {

}

test1() TestObject {
    ret TestObject(3)
}

test2(obj TestObject) TestObject {
    ret obj
}

test3(a TestObject, b TestObject) {
}

main() Int {
    obj3 = test1()

    let obj1 = TestObject(1) {
        let obj2 = TestObject(2) {
            
        }
    }

    obj4 = test2(TestObject(4))
    obj5 TestInterface = TestObject(5)
    test3(TestObject(6), TestObject(7)) 
    test3(TestObject(8), TestObject(9)) 
    if TestObject(10) {
        TestObject(11)
    }

    while not TestObject(12) {
    }

    ret 0
}
