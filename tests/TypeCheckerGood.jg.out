Module
  name: 
  feature0: Class
    name: CycleType1
    comment:
    feature0: Function
      name: check1
      type: CycleType2
      formal0: Formal
        name: self
        type: CycleType1
      block: 
  feature1: Class
    name: CycleType2
    comment:
    feature0: Function
      name: check1
      type: CycleType1
      formal0: Formal
        name: self
        type: CycleType2
      block: 
  feature2: Class
    name: TypeChecker
    comment:
    feature0: Function
      name: @index
      type: Void
      comment:
      formal0: Formal
        name: self
        type: TypeChecker
      formal1: Formal
        name: x
        type: CycleType2
      formal2: Formal
        name: y
        type: CycleType2
      block: Block
    feature1: Function
      name: check1
      type: Int
      comment:
      formal0: Formal
        name: self
        type: TypeChecker
      block: Block
        child0: Return
          expression: IntegerLiteral(2)
    feature2: Function
      name: check2
      type: Void
      comment:
      formal0: Formal
        name: self
        type: TypeChecker
      formal1: Formal
        name: bob
        type: Int
      block: Block
    feature3: Function
      name: main
      type: Void
      comment:
      formal0: Formal
        name: self
        type: TypeChecker
      block: Block
        child0: Statement
          expression: Assignment
            name: t
            type: TypeChecker
            declared: <<top>>
            initializer: Construct
              type: TypeChecker
        child1: Statement
          expression: Call
            expression: Member
              identifier: check2
              expression: Identifier
                name: t
            argument0: Identifier
              name: t
            argument1: Call
              expression: Member
                identifier: check1
                expression: Identifier
                  name: t
              argument0: Identifier
                name: t
        child2: Statement
          expression: Assignment
            name: a
            type: Int
            declared: <<top>>
            initializer: Call
              expression: Member
                identifier: check1
                expression: Identifier
                  name: t
              argument0: Identifier
                name: t
        child3: Statement
          expression: Assignment
            name: b
            type: Int
            declared: <<top>>
            initializer: Call
              expression: Member
                identifier: @add
                expression: Identifier
                  name: a
              argument0: Identifier
                name: a
              argument1: IntegerLiteral(10)
        child4: Statement
          expression: Assignment
            name: c
            type: CycleType1
            declared: CycleType1
            initializer: Empty
        child5: Statement
          expression: Assignment
            name: d
            type: CycleType2
            declared: CycleType2
            initializer: Empty
        child6: Statement
          expression: Assignment
            name: c
            type: CycleType2
            declared: <<top>>
            initializer: Identifier
              name: d
        child7: Statement
          expression: Assignment
            name: d
            type: CycleType1
            declared: <<top>>
            initializer: Identifier
              name: c
        child8: Statement
          expression: Call
            expression: Member
              identifier: @index
              expression: Identifier
                name: t
            argument0: Identifier
              name: t
            argument1: Identifier
              name: c
            argument2: Identifier
              name: d
        child9: Statement
          expression: Assignment
            name: e
            type: Bool
            declared: Bool
            initializer: Empty
        child10: Conditional
          guard: Binary
            operation: and
            left: Identifier
              name: e
            right: Unary
              child: Identifier
                name: e
              operation: not
          true: Block
          false: Conditional
            guard: Binary
              operation: or
              left: Identifier
                name: e
              right: Identifier
                name: e
            true: Block
            false: Block
        child11: While
          guard: Binary
            operation: and
            left: Identifier
              name: e
            right: Identifier
              name: b
          block: Block
    feature4: Function
      name: @destroy
      type: Void
      formal0: Formal
        name: self
        type: TypeChecker
      block: Block
    feature5: Function
      name: @init
      type: Void
      block: Block
