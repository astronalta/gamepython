# jgtest exec on
# Tests that control structures are usable as expressions
Val < Value {
    str String
    @init(pstr String) {
        str = pstr
    }
    @destroy() {
        Io::println("del #{str}")
    }
}

test_cond() {
    Io::println("test_cond")
    x = if true { "hello" } else { "false" }
    Io::println(x)
    Io::println(if false { "hello" } else { "false" })

    y = if true { Val("1") } else { Val("2") }
    Io::println(y.str)
    Io::println(if false { Val("3") } else { Val("4") }.str)

    z = if true {
        Val("5")
    } else if true {
        Val("6")
    } else {
        Val("7")
    }
    Io::println(z.str)
}

test_let() {
#    Io::println("test_let")
#    x = let y = "bob" { y }
#    Io::println(x)
#    Io::println(let y = "bill" { "mike" }.str)
#    Io::println("")
#
#    Io::println(let y = "bill" { Val("mike") }.str)
}

test_match() {
#    Io::println("test_match")
#    x = match 1 {
#    with 2: "hello"
#    with 3: "bob"
#    with 1: "nothing"
#    }
#    Io::println(x)
#    Io::println(match 7 { with 8: "fail"})
}

main() Int {
    test_cond()
    Io::println('')
    test_let()
    Io::println('')
    test_match()
    ret 0
}
