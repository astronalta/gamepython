Module
  name: 
  feature0: Function
    name: main
    type: Int
    comment:
    block: Block
      child0: Variable
        name: a
        type: <<notype>>
        initializer: BooleanLiteral(1)
      child1: Variable
        name: b
        type: <<notype>>
        initializer: BooleanLiteral(0)
      child2: Conditional
        guard: Identifier
          name: a
        true: Block
          child0: Statement
            expression: Call
              name: boot_print_str
              argument0: StringLiteral
                value: true\n
        false: Block
          child0: Statement
            expression: Call
              name: boot_print_str
              argument0: StringLiteral
                value: false\n
      child3: Conditional
        guard: Identifier
          name: b
        true: Block
          child0: Statement
            expression: Call
              name: boot_print_str
              argument0: StringLiteral
                value: true\n
        false: Block
          child0: Statement
            expression: Call
              name: boot_print_str
              argument0: StringLiteral
                value: false\n
      child4: Return
        expression: IntegerLiteral(0)
main:
    t1 <- '1' {}
    t2 <- '0' {t1}
    if not t1 goto l2 {t1, t2}
l1:
    r5 <- 'true\n' {t2}
    call '_boot_print_str' {t2}
    jump l3 {t2}
l2:
    r5 <- 'false\n' {t2}
    call '_boot_print_str' {t2}
l3:
    if not t2 goto l5 {t2}
l4:
    r5 <- 'true\n' {}
    call '_boot_print_str' {}
    jump l6 {}
l5:
    r5 <- 'false\n' {}
    call '_boot_print_str' {}
l6:
    r1 <- '0' {}
    ret {}

main:
    r2 <- '1' {}
    r1 <- '0' {r2}
    if not r2 goto l2 {r2, r1}
l1:
    r5 <- 'true\n' {r1}
    call '_boot_print_str' {r1}
    jump l3 {r1}
l2:
    r5 <- 'false\n' {r1}
    call '_boot_print_str' {r1}
l3:
    if not r1 goto l5 {r1}
l4:
    r5 <- 'true\n' {}
    call '_boot_print_str' {}
    jump l6 {}
l5:
    r5 <- 'false\n' {}
    call '_boot_print_str' {}
l6:
    r1 <- '0' {}
    ret {}

true
false
