Module
  name: 
  feature0: Class
    name: CycleType1
    comment:
    feature0: Function
      name: check1
      type: CycleType2
      formal0: Formal
        name: self
        type: Self
      block: 
  feature1: Class
    name: CycleType2
    comment:
    feature0: Function
      name: check1
      type: CycleType1
      formal0: Formal
        name: self
        type: Self
      block: 
  feature2: Class
    name: TypeChecker
    comment:
    feature0: Function
      name: @index
      type: Void
      comment:
      formal0: Formal
        name: self
        type: Self
      formal1: Formal
        name: x
        type: CycleType2
      formal2: Formal
        name: y
        type: CycleType2
      block: Block
    feature1: Function
      name: check1
      type: Int
      comment:
      formal0: Formal
        name: self
        type: Self
      block: Block
        child0: Return
          expression: IntegerLiteral(2)
    feature2: Function
      name: check2
      type: Void
      comment:
      formal0: Formal
        name: self
        type: Self
      formal1: Formal
        name: bob
        type: Int
      block: Block
    feature3: Function
      name: main
      type: Void
      comment:
      formal0: Formal
        name: self
        type: Self
      block: Block
        child0: Assignment
          name: t
          type: <<notype>>
          initializer: Construct
            type: TypeChecker
        child1: Statement
          expression: Dispatch
            name: check2
            argument0: Identifier
              name: t
            argument1: Dispatch
              name: check1
              argument0: Identifier
                name: t
        child2: Assignment
          name: a
          type: <<notype>>
          initializer: Dispatch
            name: check1
            argument0: Identifier
              name: t
        child3: Assignment
          name: b
          type: <<notype>>
          initializer: Dispatch
            name: @add
            argument0: Identifier
              name: a
            argument1: IntegerLiteral(10)
        child4: Assignment
          name: c
          type: CycleType1
          initializer: Empty
        child5: Assignment
          name: d
          type: CycleType2
          initializer: Empty
        child6: Assignment
          name: c
          type: <<notype>>
          initializer: Identifier
            name: d
        child7: Assignment
          name: d
          type: <<notype>>
          initializer: Identifier
            name: c
        child8: Statement
          expression: Dispatch
            name: @index
            argument0: Identifier
              name: t
            argument1: Identifier
              name: c
            argument2: Identifier
              name: d
        child9: Assignment
          name: e
          type: Bool
          initializer: Empty
        child10: Conditional
          guard: Binary
            operation: and
            left: Identifier
              name: e
            right: Unary
              child: Identifier
                name: e
              operation: not
          true: Block
          false: Conditional
            guard: Binary
              operation: or
              left: Identifier
                name: e
              right: Identifier
                name: e
            true: Block
            false: Block
        child11: While
          guard: Binary
            operation: and
            left: Identifier
              name: e
            right: Identifier
              name: b
          block: Block
