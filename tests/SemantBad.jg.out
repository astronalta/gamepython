SemantBad.jg:3:1: Function 'foo' must return a value
SemantBad.jg:10:1: Duplicate definition of function 'foo'
SemantBad.jg:54:5: Duplicate definition of attribute 'blarg'
SemantBad.jg:19:5: Function 'bar' must return a value
SemantBad.jg:35:5: Duplicate definition of function 'bar'
SemantBad.jg:57:1: Duplicate definition of class 'Bob'
SemantBad.jg:62:5: Statement is unreachable
SemantBad.jg:67:5: Value assigned to formal parameter 'a'
SemantBad.jg:71:11: Undeclared generic type ':b'
SemantBad.jg:73:13: Undeclared generic type ':b'
SemantBad.jg:73:17: Undeclared generic type ':b'
SemantBad.jg:81:9: Too many arguments for type 'One'
SemantBad.jg:85:9: Not enough arguments for type 'Two'
SemantBad.jg:86:11: Not enough arguments for type 'Two'
Module
  name: 
  feature0: Function
    name: foo
    type: Int
    comment:
    block: Block
      child0: Conditional
        guard: BooleanLiteral(1)
        true: Block
          child0: Return
            expression: IntegerLiteral(1)
        false: Block
  feature1: Function
    name: foo
    type: Int
    comment:
    block: Block
      child0: Conditional
        guard: BooleanLiteral(1)
        true: Block
          child0: Return
            expression: IntegerLiteral(2)
        false: Block
          child0: Return
            expression: IntegerLiteral(3)
  feature2: Class
    name: Bob
    comment:
    feature0: Function
      name: bar
      type: Int
      comment:
      formal0: Formal
        name: self
        type: Bob
      block: Block
        child0: Conditional
          guard: Binary
            operation: and
            left: BooleanLiteral(1)
            right: Unary
              child: BooleanLiteral(0)
              operation: not
          true: Block
            child0: Conditional
              guard: BooleanLiteral(1)
              true: Block
                child0: Return
                  expression: IntegerLiteral(9)
              false: Block
            child1: Return
              expression: IntegerLiteral(1)
          false: Conditional
            guard: BooleanLiteral(1)
            true: Block
              child0: Return
                expression: IntegerLiteral(1)
            false: Block
              child0: Conditional
                guard: BooleanLiteral(1)
                true: Block
                  child0: Return
                    expression: IntegerLiteral(1)
    feature1: Function
      name: bar
      type: Int
      comment:
      formal0: Formal
        name: self
        type: Bob
      block: Block
        child0: Conditional
          guard: Binary
            operation: and
            left: BooleanLiteral(1)
            right: Unary
              child: BooleanLiteral(0)
              operation: not
          true: Block
            child0: Conditional
              guard: BooleanLiteral(1)
              true: Block
                child0: Return
                  expression: IntegerLiteral(9)
              false: Block
            child1: Return
              expression: IntegerLiteral(1)
          false: Conditional
            guard: BooleanLiteral(1)
            true: Block
              child0: Return
                expression: IntegerLiteral(1)
            false: Block
              child0: Conditional
                guard: BooleanLiteral(1)
                true: Block
                  child0: Return
                    expression: IntegerLiteral(1)
                false: Block
                  child0: Return
                    expression: IntegerLiteral(99)
    feature2: Attribute
      name: blarg
      type: Int
      initializer: Empty
    feature3: Attribute
      name: blarg
      type: Bool
      initializer: Empty
    feature4: Function
      name: @destroy
      type: Void
      formal0: Formal
        name: self
        type: Bob
      block: Block
    feature5: Function
      name: @init
      type: Void
      block: Block
  feature3: Class
    name: Bob
    comment:
    feature0: Function
      name: @destroy
      type: Void
      formal0: Formal
        name: self
        type: Bob
      block: Block
    feature1: Function
      name: @init
      type: Void
      block: Block
  feature4: Function
    name: bar
    type: Int
    comment:
    block: Block
      child0: Return
        expression: IntegerLiteral(1)
      child1: Statement
        expression: Assignment
          name: a
          type: Int
          declared: Int
          initializer: IntegerLiteral(10)
      child2: Return
        expression: Identifier
          name: a
  feature5: Function
    name: assign
    type: Void
    comment:
    formal0: Formal
      name: a
      type: Int
    block: Block
      child0: Statement
        expression: Assignment
          name: a
          type: Int
          declared: <<top>>
          initializer: IntegerLiteral(10)
  feature6: Class
    name: Container
    comment:
    feature0: Attribute
      name: value
      type: :b
      initializer: Empty
    feature1: Function
      name: bar
      type: :b
      comment:
      formal0: Formal
        name: self
        type: Container[:a]
      formal1: Formal
        name: val
        type: :b
      block: Block
        child0: Return
          expression: IntegerLiteral(0)
    feature2: Function
      name: @destroy
      type: Void
      formal0: Formal
        name: self
        type: Container[:a]
      block: Block
    feature3: Function
      name: @init
      type: Void
      block: Block
    feature4: Function
      name: value=
      type: Void
      formal0: Formal
        name: self
        type: Container[:a]
      formal1: Formal
        name: _arg0
        type: :b
      block: Block
        child0: Statement
          expression: Assignment
            name: value
            type: <<top>>
            declared: <<top>>
            initializer: Identifier
              name: _arg0
    feature5: Function
      name: value?
      type: :b
      formal0: Formal
        name: self
        type: Container[:a]
      block: Block
        child0: Return
          expression: Identifier
            name: value
  feature7: Class
    name: One
    comment:
    feature0: Attribute
      name: one
      type: One[String,String]
      initializer: Empty
    feature1: Function
      name: @destroy
      type: Void
      formal0: Formal
        name: self
        type: One[:a]
      block: Block
    feature2: Function
      name: @init
      type: Void
      block: Block
    feature3: Function
      name: one=
      type: Void
      formal0: Formal
        name: self
        type: One[:a]
      formal1: Formal
        name: _arg0
        type: One[String,String]
      block: Block
        child0: Statement
          expression: Assignment
            name: one
            type: <<top>>
            declared: <<top>>
            initializer: Identifier
              name: _arg0
    feature4: Function
      name: one?
      type: One[String,String]
      formal0: Formal
        name: self
        type: One[:a]
      block: Block
        child0: Return
          expression: Identifier
            name: one
  feature8: Class
    name: Two
    comment:
    feature0: Attribute
      name: two
      type: Two[String]
      initializer: Empty
    feature1: Attribute
      name: three
      type: Two
      initializer: Empty
    feature2: Function
      name: @destroy
      type: Void
      formal0: Formal
        name: self
        type: Two[:a,:b]
      block: Block
    feature3: Function
      name: @init
      type: Void
      block: Block
    feature4: Function
      name: two=
      type: Void
      formal0: Formal
        name: self
        type: Two[:a,:b]
      formal1: Formal
        name: _arg0
        type: Two[String]
      block: Block
        child0: Statement
          expression: Assignment
            name: two
            type: <<top>>
            declared: <<top>>
            initializer: Identifier
              name: _arg0
    feature5: Function
      name: two?
      type: Two[String]
      formal0: Formal
        name: self
        type: Two[:a,:b]
      block: Block
        child0: Return
          expression: Identifier
            name: two
    feature6: Function
      name: three=
      type: Void
      formal0: Formal
        name: self
        type: Two[:a,:b]
      formal1: Formal
        name: _arg0
        type: Two
      block: Block
        child0: Statement
          expression: Assignment
            name: three
            type: <<top>>
            declared: <<top>>
            initializer: Identifier
              name: _arg0
    feature7: Function
      name: three?
      type: Two
      formal0: Formal
        name: self
        type: Two[:a,:b]
      block: Block
        child0: Return
          expression: Identifier
            name: three
