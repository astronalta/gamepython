translation_unit
    : TOK_CLASS qualified_name TOK_SEMI class_member_list 
    | TOK_INTERFACE qualified_name TOK_SEMI interface_member_list
    | TOK_STRUCT qualified_name TOK_SEMI struct_member_list
    | TOK_MODULE qualified_name TOK_SEMI module_member_list
    ;

class_member_list
    : import class_member_list
    | def class_member_list
    | variable class_member_list
    | constructor class_member_list
    | destructor class_member_list
    | function class_member_list
    | <empty>
    ;

interface_member_list
    : import interface_member_list
    | def interface_member_list
    | prototype interface_member_list
    | <empty>
    ;

struct_member_list
    : import struct_member_list
    | def struct_member_list
    | variable struct_member_list
    | constructor struct_member_list
    | function struct_member_list
    | <empty>
    ;

module_member_list
    : import module_member_list
    | def module_member_list
    | function module_member_list
    | <empty>
    ;
    
import 
    : TOK_IMPORT qualified_name TOK_SEMI
    ;

def
    : TOK_DEF type TOK_TYPE TOK_SEMI
    ;

variable
    : access storage type TOK_IDENT initializer 
    ;

constructor
    : TOK_INIT argument_list access native compound_statement
    ;

destructor
    : TOK_DESTROY argument_list native compound_statement
    ;

function
    : TOK_IDENT argument_list access storage native type compound_statment
    ;

prototype
    : TOK_IDENT argument_list type TOK_SEMI
    ;

access 
    : TOK_PUBLIC
    | TOK_PRIVATE
    | TOK_PROTECTED
    | <empty>
    ;

storage
    : TOK_STATIC
    | <empty>
    ;
    
native
    : TOK_NATIVE
    | <empty>
    ;

type 
    : uint
    | int
    | ushort
    | short
    | ubyte
    | byte 
    | qualified_name
    ;

initializer     
    : TOK_EQUALS expression TOK_SEMI
    | TOK_SEMI
    ;

qualified_name
    : TOK_TYPE qualified_name_tail
    ;

qualified_name_tail
    : TOK_SCOPE TOK_TYPE qualified_name_tail
    | <empty>
    ;
    
compound_statement
    : TOK_LBRACE statement_list TOK_RBRACE
    ;


















argument_list
    : argument argument_list_tail
    ;

argument_list_tail
    : TOK_COMMA argument argument_list_tail
    | <empty>
    ;


statement_list
    : statement statement_list
    | <empty>
    ;

statement
    : TOK_SEMI
    ;




    | expression TOK_SEMI
    | selection_statement
    | TOK_IF TOK_LPAREN expression TOK_RPAREN compound_statement conditional_tail
    | TOK_WHILE TOK_LPAREN expression TOK_RPAREN compound_statement
    | TOK_UNTIL TOK_LPAREN expression TOK_RPAREN compound_statement
    | TOK_DO compound_statement TOK_WHILE TOK_LPAREN expression TOK_RPAREN TOK_SEMI
    | TOK_FOR TOK_LPAREN expression_statement expression_statement expression TOK_RPAREN compound_statement
    | TOK_EACH TOK_LPAREN ---- TODO
    ;

conditional_tail:
    : TOK_ELSE compound_statement
    | <empty>
    ;


expression: 
    : assignment_expression
    ; 

assignment_expression
    : conditional_expression
    | unary_expression assignment_operator assignment_expression
    ;

conditional_expression
    :
