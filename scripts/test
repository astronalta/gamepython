#!/usr/bin/ruby

require 'optparse'

@failed = false
@options = {}
@total = 0

def check(test, result)
    if !result.empty? || $? != 0
        (1..79).each { putc '-' }        
        puts
        puts "FAILED TEST: #{test}"
        (1..79).each { putc '-' }        
        puts
        puts result
        puts $?
        @failed = true
    end
end

# Parse command line options to enable/disable valigrind, etc.
OptionParser.new do |opts|
    opts.on('-f', '--full', 'Run all tests, including memchecker') do |v|
        @options[:full] = v
    end
    opts.on('-v', '--verbose', 'Print test status') do |v|
        @options[:verbose] = v
    end
end.parse!

Dir.chdir('tests')

if ARGV.empty?
    tests = Dir.glob('*.ap') + Dir.glob('*.c') + Dir.glob('*.rb')
else
    tests = ARGV
end

# Compilation tests.  Compile an Apollo source file, and potentially run the
# resulting program
tests.each do |test|
    next if /.ap$/ !~ test

    if @options[:verbose]
        puts test
    end

    test = test.sub(/.ap$/, "")

    flags = ""
    run = false
    File.open(test+".ap") do |file|
        file.each_line do |line|
            case line
            when /^# aptest print_ast on/ 
                flags += " --dump-ast"
            when /^# aptest print_ir on/ 
                flags += " --dump-ir"
            end
        end
    end
    if flags.empty?
        flags += "-e" 
        run = true
    end

    command = "../bin/apollo #{test} --optimize -i ../runtime -i ../lib "
    command = command + "#{flags} > /tmp/diff 2>&1"
    if @options[:full]
        valgrind = "valgrind -q --leak-check=full"
        valgrind = valgrind + " --suppressions=../scripts/valgrind.supp" 
        #valgrind = valgrind + " --gen-suppressions=all"
        command = valgrind + " " + command;    
    end
    `#{command}`
    result = `diff /tmp/diff #{test}.ap.out` 
    check(test, result)
    @total += 1
end

# Ruby tests.  Useful for various miscellaneous tests that are not easily
# expressed in C++.
tests.each do |test|
    next if /.rb$/ !~ test
    if @options[:verbose]
        puts test
    end
    
    result = `ruby #{test} 2>&1 | diff - #{test}.out`
    check(test, result)
    @total += 1
end

# C++ tests.  Used primarily for unit tests and to test the runtime library.
tests.each do |test|
    next if /.c$/ !~ test
    if @options[:verbose]
        puts test
    end
    exe = test.sub(/.c$/, "");
    result = `gcc -g #{test} -o ../build/#{exe} -L../lib -lapollo -I..`
    result += `../build/#{exe} | diff - #{test}.out`
    check(test, result)
    @total += 1
end

# Finally, check for errors.  If there was an error, exit with code -1 to stop
# the whole build.
if @failed 
    exit(-1)
elsif @options[:verbose]
    puts "All #{@total} tests passed."
end



