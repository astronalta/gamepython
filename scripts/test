#!/usr/bin/ruby

require 'optparse'

@failed = false
@options = {}
@total = 0

def check(test, result)
    if !result.empty? || $? != 0
        (1..79).each { putc '-' }        
        puts
        puts "FAILED TEST: #{test}"
        (1..79).each { putc '-' }        
        puts
        puts result
        @failed = true
    end
end

# Parse command line options to enable/disable valigrind, etc.
OptionParser.new do |opts|
    opts.on('-f', '--full', 'Run all tests, including memchecker') do |v|
        @options[:full] = v
    end
    opts.on('-v', '--verbose', 'Print test status') do |v|
        @options[:verbose] = v
    end
end.parse!

Dir.chdir('tests')

# Compilation tests.  Compile an Apollo source file, and potentially run the
# resulting program
tests = Dir.glob('*.ap')
tests.each do |test|
    if @options[:verbose]
        puts test
    end

    test.sub!(/.ap$/, "")

    if @options[:full]
        flags = ""
        flags = flags + " --leak-check=full"
        flags = flags + " --suppressions=../scripts/valgrind.supp"
        #flags = flags + " --gen-suppressions=all"
        command = "valgrind #{flags} -q ../bin/test #{test} -p ../runtime "
        command += "2>&1 | diff - #{test}.ap.out"
        result = `#{command}`
    else
        result = `../bin/test #{test} -p ../runtime 2>&1 | diff - #{test}.ap.out`
    end
    check(test, result)
end
@total += tests.length

# Ruby tests.  Useful for various miscellaneous tests that are not easily
# expressed in C++.
tests = Dir.glob('*.rb')
tests.each do |test|
    if @options[:verbose]
        puts test
    end
    
    result = `ruby #{test} 2>&1 | diff - #{test}.out`
    check(test, result)
end
@total += tests.length

# C++ tests.  Used primarily for unit tests and to test the runtime library.
tests = Dir.glob('*.c')
tests.each do |test|
    if @options[:verbose]
        puts test
    end
    exe = test.sub(/.c$/, "");
    result = `gcc -g #{test} -o ../build/#{exe} -L../lib -lapollo -I..`
    result += `../build/#{exe} | diff - #{test}.out`
    check(test, result)
end
@total += tests.length

# Finally, check for errors.  If there was an error, exit with code -1 to stop
# the whole build.
if @failed 
    exit(-1)
elsif @options[:verbose]
    puts "All #{@total} tests passed."
end



