#!/usr/bin/python
# This script uploads a new release to the downloads section of the GitHub
# repository for the Jogo project.  Argument = version #

import httplib, json, getpass, sys, os, base64, mimetypes

version = sys.argv[1]
username = raw_input('Username: ')
password = getpass.getpass()
repo = '/repos/mfichman/jogo'
github = 'api.github.com'
amazon = 'github.s3.amazonaws.com'
downloads = repo + '/downloads'

if 'win32' in sys.platform:
    pkg = 'jogo-'+version+'.exe'
    system = 'Windows'
elif 'darwin' in sys.platform:
    pkg = 'jogo-'+version+'.pkg'
    system = 'OS X'
elif 'linux' in sys.platform:
    pkg = 'jogo-'+version+'.deb'
    system = 'Linux'


def basic_auth(req, username, password):
    code = base64.encodestring(username + ':' + password).replace('\n', '')
    req.putheader('Authorization', 'Basic ' + code)


# Open an HTTP connection to the GiHub API server (v3)
print('Connecting to ' + github)
http = httplib.HTTPSConnection(github, 443)
http.putrequest('GET', downloads)
http.endheaders()
http.send('')
res = http.getresponse()
data = json.loads(res.read())

for item in data:
    # Get the list of downloads, and determine if the download is already there
    # but should be overwritten
    if item['name'] == pkg:
        path = downloads + '/' + str(item['id'])
        print('Deleting ' + path)
        http.putrequest('DELETE', path)
        basic_auth(http, username, password)
        http.endheaders()
        http.send('')
        res = http.getresponse()
        res.read()

# Now post the new upload resource
http.putrequest('POST', downloads, False, True)
basic_auth(http, username, password)
http.putheader('Content-Type', 'application/x-www-form-urlencoded')
http.putheader('Accept', '*/*')
body = json.dumps({ 
    'name': pkg,
    'description': 'Jogo ' + version + ' for ' + system,
    'size': os.path.getsize(pkg),
    'content_type': mimetypes.guess_type(pkg)[0] })
http.putheader('Content-Length', str(len(body)))
http.endheaders()
http.send(body)
res = http.getresponse()
upload = json.loads(res.read())
http.close()

# Generate the message body
print('Uploading file')
BOUNDARY = '---------------------------0xdeadbeef1987foobar'
data = [
    ['key', upload['path']],
    ['acl', upload['acl']],
    ['success_action_status', '201'],
    ['Filename', upload['name']],
    ['AWSAccessKeyId', upload['accesskeyid']],
    ['Policy', upload['policy']],
    ['Signature', upload['signature']],
    ['Content-Type', upload['mime_type']],
    ['file', open(pkg, 'rb').read()]
]
body = bytearray()
for pair in data:
    body.extend('--' + BOUNDARY + '\r\n')
    body.extend('Content-Disposition: form-data; name="' + pair[0] + '"\r\n')
    body.extend('\r\n')
    body.extend(bytes(pair[1]))
    body.extend('\r\n')
body.extend('--' + BOUNDARY + '--')

# Now open a connection to the Amazon AWS server
http = httplib.HTTPSConnection(amazon, 443)
http.putrequest('POST', '/')
http.putheader('Content-Type', 'multipart/form-data; boundary='+BOUNDARY)
http.putheader('Content-Length', str(len(body)))
http.endheaders()
http.send(body)
res = http.getresponse()
print(res.msg)
print(res.read())
http.close()

