# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

Stream < Object {
    # The Socket::Stream class implements a stream-oriented socket (e.g., TCP).
    # Usually, a stream socket is created using the Socket::stream function,
    # but sockets can also be created directly using the constructor below.

    stream immutable Io::Stream
    # Handle to an Io::Stream, which can used to perform I/O on the socket.

    addr immutable = Addr("")
    # The address that the socket is bound to.

    peer = Addr("")
    # The address of the remote peer.  Note that writing to this value will
    # flush the stream, disconnect the socket from the current peer, and
    # reconnect the socket to the new peer.

    # FIXME: Add enum error codes

    @init() {
        # Creates a new socket that is not connected to any remote host.  The
        # new socket is not bound to any local port or interface until the
        # 'addr' attribute is set.
    }

    close() native {
        # Flushes the stream, then gracefully closes the socket by calling
        # 'shutdown' and reading any remaining data from the socket.
    }

    peer=(addr Addr) native {
        # Connects this socket to 'addr'.  If there is an existing connection,
        # it will be closed before the socket connects to the new remote peer.
        # This function will block the current coroutine until the connection 
        # succeeds or fails.
    }
}
