# Copyright (c) 2010 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

Listener < Object {
    # Stream-oriented (TCP) server socket.  This class is used to listen for
    # socket connections from remote hosts.

    handle Int
    # Handle to the underlying socket descriptor.

    addr var = Addr("", 0)
    # Address that the socket is bound to.  Note that setting this value will
    # close the current listening socket and reopen the socket using the new
    # address.

    backlog var Int = 16
    # Hint used to limit the number of outstanding connections in the socket's
    # listening queue.  This corresponds to the traditional 'backlog' parameter
    # to the Berkeley sockets listen() function call.

    coroutine Coroutine
    # The coroutine that this listener is blocked on during accept().

    @destroy() {
        # Destroys the socket, and closes the listening port.
        self.close()
    } 

    accept() native Stream {
        # Waits for a client to connect to the listening socket, and returns a
        # new handle to the established stream.  This call will block the 
        # current coroutine.
    }

    addr=(addr Addr) native {
        # Binds the socket to the given address.  The socket may be rebound
        # to new address by setting the addr field.
    }

    close() native {
        # Closes the listening socket.
    }

    reuse_addr=(flag Bool) native {
        # Set to true of enable the SO_REUSEADDR option.
    }
}
