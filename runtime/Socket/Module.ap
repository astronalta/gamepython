# Copyright (c) 2010 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

connect(peer String, port Int) Stream {
    # Creates a new stream (TCP) socket and attempts to connect to 'peer'.
    # This function will block the current coroutine until the connection is
    # established or the connection fails.
    socket = Stream()
    socket.peer = Addr(peer, port)
    ret socket
}

listen(addr String, port Int) Listener {
    # Creates a listener (TCP) socket, and binds it to 'addr'.
    socket = Listener()
    socket.addr = Addr(addr, port)
    ret socket
}

#datagram(addr String) Datagram {
#    # Creates a new datagram (UDP) socket and binds it to 'addr'.
#    socket = Datagram()
#    socket.addr = Addr(addr)
#    ret socket
#}
#
