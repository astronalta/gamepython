# Copyright (c) 2013 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

ChanState = OPEN | CLOSED

Chan[:a] < Object {
    # A channel is an object that is used by coroutines to communicate with
    # other coroutines.  The writer coroutine inserts an object into the
    # channel using the put() method.  Meanwhile, the reader coroutine attempts
    # to grab an item using get().  This allows one coroutine to wait for
    # another coroutine to send it some data.
    queue private Queue[:a]
    limit Int
    state = ChanState::OPEN
    writer private = Queue[Coroutine](0)
    reader private = Queue[Coroutine](0)

    @init(plimit Int) {
        # Initializes a new channel with the given buffer limit size.  A limit
        # of 0 indicates that the channel is unbuffered.
        queue = Queue[:a](plimit)
        limit = plimit
    }

    await() private {
        # Wait for a value to be present in the queue
        if queue.empty and state == ChanState::OPEN {
            reader.enq(coroutine())
        }
        while queue.empty and state == ChanState::OPEN {
            yield
        }
    }

    notify() private {
        # Wake up a reader coroutine
        if not reader.empty {
            r = reader.deq()
            r.resume() 
        }
    }

    more?() Bool {
        # Returns true as long as the channel is open to receive more requests
        self.await()
        ret not queue.empty or state == ChanState::OPEN
    }

    next() :a {
        # Waits until a value is available to be consumed
        self.await()
        next = queue.deq()
        if not writer.empty {
            w = writer.deq()
            w.resume()
        }
        ret next 
    }

    close() {
        # Closes the channel
        state = ChanState::CLOSED
        self.notify()
    }

    put(next :a) {
        # Waits until the previous value was consumed, and then posts the value
        # to the channel
        if limit == 0 {
            if reader.empty {
                writer.enq(coroutine())
            }
            while reader.empty {
                yield
            }
        } else {
            if queue.count >= limit {
                writer.enq(coroutine())
            } 
            while queue.count >= limit {
                yield
            }
        }
        queue.enq(next)
        self.notify()
    }

    iter() Chan[:a] {
        # Allows a channel to be used in a for loop as an iterable sequence
        ret self
    }
}
