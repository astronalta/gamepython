# Copyright (c) 2010 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


Client < Object {
    # A client object outputs request objects to the stream specified by the
    # 'stream' attribute.  Optionally, a client can be created via the Http
    # module factory functions (i.e., Http::open).

    socket Socket::Stream # Stream to be used for issuing requests. 
    host String # Host the client is connected to
    port Int # Port the client is connected to
}

Client::@init(phost String, pport Int) {
    # Initializes a new HTTP client object 
    host = phost
    port = pport
    socket = Socket::connect(host, port)
}

Client::write(req Request) Response {
    # Issues a new request using the given IO stream.  This method will modify
    # the request to update the 'Host' header, as required by HTTP/1.1
    req.headers['Host'] = host
    req.write(socket.stream)
    res = Response()
    res.read(socket.stream)
    ret res
}

Client::get(path String) Response {
    # Issues a new GET request using the current connection.
    req = Request()
    req.headers['Host'] = host
    #req.path = Uri::Path(path)
    ret self.write(req)
}
