# Copyright (c) 2010 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

Method = GET | HEAD | POST | PUT | DELETE | TRACE | CONNECT

Request < Object {
    # The request object stores information about the type of request that will
    # be sent to the server.  Request objects may be reused multiple times for
    # efficiency.

    method = Method::GET
    # The method to use for communication with the server.

    path String
    # Path to the resource requested by the server. FIXME: Replace this with a 
    # Uri object, for added type safety.

    headers immutable = Hash[String, String]()
    # Set of headers to use with the request.  A few headers are set by
    # default, but may be overridden:
    # * Connection: close
    # * User-Agent: Jogo HTTP Client
    # * Accept-Charset: utf-8
    # * Accept-Encoding: identity 

    @init() {
        headers["Connection"] = "close"
        headers["User-Agent"] = "Jogo HTTP Client"
        headers["Accept-Charset"] = "utf-8"
        headers["Accept-encoding"] = "identity"
    }
}

Status < Enum {
    # Encodes an HTTP status value.  The first code below ("UNKNOWN") is used
    # to indicate an invalid status code returned by the server.
    INVALID_CODE = 0
    CONTINUE = 100
    SWITCHING_PROTOCOLS = 101
    OK = 200
    CREATED = 201
    ACCEPTED = 202
    NON_AUTHORITATIVE_INFO = 203
    NO_CONTENT = 204
    RESET_CONTENT = 205 
    PARTIAL_CONTENT = 206
    MULTIPLE_CHOICES = 300
    MOVED_PERMANENTLY = 301
    FOUND = 302
    SEE_OTHER = 303
    NOT_MODIFIED = 304
    USE_PROXY = 305
    TEMPORARY_REDIRECT = 307
    BAD_REQUEST = 400
    UNAUTHORIZED = 401
    PAYMENT_REQUIRED = 402 
    FORBIDDEN = 403
    NOT_FOUND = 404
    METHOD_NOT_ALLOWED = 405
    NOT_ACCEPTABLE = 406
    PROXY_AUTHENTICATION_REQUIRED = 407
    REQUEST_TIMEOUT = 408
    CONFLICT = 409
    GONE = 410
    LENGTH_REQUIRED = 411
    PRECONDITION_FAILED = 412
    REQUEST_ENTITY_TOO_LARGE = 413
    UNSUPPORTED_MEDIA_TYPE = 415
    REQUESTED_RANGE_NOT_SATISFIABLE = 416
    EXPECTATION_FAILED = 417
    INTERNAL_SERVER_ERROR = 500
    NOT_IMPLEMENTED = 501
    BAD_GATEWAY = 502
    SERVICE_UNAVAILABLE = 503
    GATEWAY_TIMEOUT = 504
    VERSION_NOT_SUPPORTED = 505
}

Response < Object {
    # Parses and stores an HTTP response.  The headers are read first, and the
    # remaining data is stored in the 'data' attribute.
   
    status immutable Status 
    # The status of the request.

    headers immutable = Hash[String,String]()
    # Set of response headers read from the server.    

    body immutable String
    # Body of the request (following the headers).

    @init(stream Io::Stream) {
        # Parses a new request from the given stream.
        #version = stream.scan(" ")
        #stream.scan(" ") # = status
        #message = stream.scanln()
    }

    strstatus(value Int) private Status {
        # Parses the given string and returns the corresponding status.  FixMe:
        # Should be able to create an enum straight from the integer code.
        match value {
        with 100: ret Status::CONTINUE
        with 101: ret Status::SWITCHING_PROTOCOLS
        }
    }
}

Client < Object {
    # A client object outputs request objects to the stream specified by the
    # 'stream' attribute.  Optionally, a client can be created via the Http
    # module factory functions (i.e., Http::open).
    
    socket immutable Socket::Stream
    # The stream to be used for issuing requests. 

    @init(host String, port Int) {
        # Initializes a new HTTP client object 
        socket = Socket::connect(host, port)
    }

    methodstr(method Method) private String {
        # Returns the Method enumeration as a string.
        match method {
        with Method::GET: ret "GET"
        with Method::HEAD: ret "HEAD"
        with Method::POST: ret "POST"
        with Method::PUT: ret "PUT"
        with Method::DELETE: ret "DELETE"
        with Method::TRACE: ret "TRACE"
        with Method::CONNECT: ret "CONNECT"
        } 
    }

    request(request Request) Response {
        # Issues a new request using the given IO stream.
        method = methodstr(request.method)
        socket.print("#{method} #{request.path} HTTP/1.1\n")
        for header in request.headers {
            socket.print("#{header.first}: #{header.second}\n")
        }
        socket.print("\n")
        socket.flush()
        ret Response(socket.stream)
    }

}
