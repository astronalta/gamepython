# Copyright (c) 2010 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


Client < Object {
    # A client object outputs request objects to the stream specified by the
    # 'stream' attribute.  Optionally, a client can be created via the Http
    # module factory functions (i.e., Http::open).
    
    socket immutable Socket::Stream
    # The stream to be used for issuing requests. 


#    @init(host String, port Int) {
#        # Initializes a new HTTP client object 
#        socket = Socket::connect(host, port)
#    }
#
#    methodstr(method Method) private String {
#        # Returns the Method enumeration as a string.
#        match method {
#        with Method::GET: ret "GET"
#        with Method::HEAD: ret "HEAD"
#        with Method::POST: ret "POST"
#        with Method::PUT: ret "PUT"
#        with Method::DELETE: ret "DELETE"
#        with Method::TRACE: ret "TRACE"
#        with Method::CONNECT: ret "CONNECT"
#        } 
#    }
#

}

Client::@init(host String, port Int) {
    # Initializes a new HTTP client object 
    socket = Socket::connect(host, port)
}

Client::request(request Request) Response {
    # Issues a new request using the given IO stream.
#    method = self.methodstr(request.method)
#    socket.print("#{method} #{request.path} HTTP/1.1\n")
#    for header in request.headers {
#        socket.print("#{header.first}: #{header.second}\n")
#    }
#    socket.print("\n")
#    socket.flush()
#    ret Response(socket.stream)
    request.write(socket.stream)
    #response = Response()
    #ret response.read(socket.stream)
    ret nil
}
