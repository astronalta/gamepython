# Copyright (c) 2010 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

Response < Object {
    # Parses and stores an HTTP response.  The headers are read first, and the
    # remaining data is stored in the 'data' attribute.
   
    status Status 
    # The status of the request.

    headers immutable = Hash[String,String]()
    # Set of response headers read from the server.    

    body String
    # Body of the request (following the headers).

}

Response::@init() {
}

Response::write(stream Io::Stream) {
}

Response::read(stream Io::Stream) {
    # Reads a response from the stream.
    version = stream.scan(" ")
    stat = stream.scan(" ")
    message = stream.scan("\r")
    stream.get()
    while stream.status == Io::StreamStatus::OK and stream.peek() != '\r'c {
        key = stream.scan(":")
        value = stream.scan("\r") 
        stream.get()
        headers[key] = value
    }
    stream.scan("\r") 
    stream.get()
    body = stream.readall()
}

response(stream Io::Stream) {
    # 
}

#@init(stream Io::Stream) {
#    # Parses a new request from the given stream.
#    #version = stream.scan(" ")
#    #stream.scan(" ") # = status
#    #message = stream.scanln()
#}
