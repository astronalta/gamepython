
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

CoroutineStatus = NEW | RUNNING | SUSPENDED | DEAD | IO

Coroutine < Object {
    # Implements a coroutine, or lightweight cooperative thread.  The coroutine
    # semantics implemented by this class is intended to be similar to Lua's
    # implementation.  Calling the coroutine after it has been created begins
    # executing the coroutine.  After a coroutine is finished, calling it again
    # has no effect.  A coroutine can yield at any point using the yield()
    # function, which returns control to caller of the coroutine.  Resuming
    # causes the execution of the coroutine to continue from the last call to
    # yield().

    function CoroutineFunc
    # This is the function that the coroutine will execute when it is run.

    status CoroutineStatus
    # This attribute is set to NEW if the coroutine was just created, DEAD if
    # the coroutine has finished executing, SUSPENDED if the coroutine is not
    # the running coroutine, and RUNNING if the coroutine is the active
    # coroutine.

    stack_size Int
    # Returns the current stack size of the coroutine.  This value can grow
    # over time.

    yield_loc mutable String
    # A description of the location where the coroutine has yielded.  Usually,
    # the compiler automatically sets this to the source file location (line
    # number and source file) where the coroutine yielded.  However, if the
    # coroutine is blocked on I/O, this string will be set to "I/O" and if the
    # coroutine yields from C, the yield_loc must be set by the C code that
    # calls yield.

    sp private Int
    # Coroutine stack pointer

    index private Int
    # Used to keep track of the coroutine in the global coroutine list

    @init(start CoroutineFunc) native {
        # Initializes a new coroutine, but does not begin executing it.  The
        # coroutine will execute 'start' the first time it is run.
    }

    @destroy() native {
        # Deallocates the coroutine, and releases the closure.
    }

    @call() {
        # This function starts or resumes a coroutine.  If the coroutine is
        # new, then the execution begins starting at 'function'.  If the
        # coroutine is dead, then this function has no effect.  Otherwise, the
        # execution resumes from the last yield.
        self.resume()
    }

    resume() native {
        # This function starts or resumes a coroutine.  If the coroutine is
        # new, then the execution begins starting at 'function'.  If the
        # coroutine is dead, then this function has no effect.  Otherwise, the
        # execution resumes from the last yield.
    }

    dump() native {
        # Dumps info about the coroutines current state
    }
}

CoroutineFunc < Interface {
    @call() {
        # Initializes, then resumes a new coroutine
    } 
}

coroutine() native Coroutine {
    # Returns the current coroutine
}

coroutines() native Array[Coroutine] {
    # Returns a list of all coroutines
}

dump_all_coroutines() {
    for c in coroutines() {
        c.dump()
    }
}
