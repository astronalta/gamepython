# Copyright (c) 2010 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


open(uri Uri::Uri) Io::Stream {
    if uri.scheme == 'http' {
        socket = Socket::connect(uri.host, 80) #FIXME: Uri.port
        req = Http::Request()
        req.method = Http::Method::GET
        req.headers['Host'] = uri.host
        req.body = ''
        req.path = uri.path
        req.write(socket.stream)
        res = Http::Response()
        res.read_headers(socket.stream)
        ret socket.stream
    } else {
        ret nil
    }
}

Authority < Value {
    user String 
    host String
    port Int # * DIGIT
    @init(puser String, phost String, pport Int) {
        user = puser
        host = phost
        port = pport
    }
}

Path < Value {
    value embedded String
    @init(pvalue String) {
        value = pvalue
    }
}

Query < Value {
    value embedded String 
    @init(pvalue String) {
        value = pvalue
    }
}

Uri < Value {
    # Defines a generic URI as defined by RFC3986.    
    scheme var String # ALPHA * (ALPHA | DIGIT | '+' | '-' | '.' )
    authority var = Authority('', '', 0) # user '@' host ':' port
    path var = Path('') # * ANY  
    query var = Query('') # '?' * ANY
    fragment var String # '#' * ANY
}

Uri::@init(value String) {
    # Parses a URI, given a string as input.
    if value.empty { 
        ret
    }
    i var = self.parse_scheme(value, 0)
    i = self.parse_authority(value, i)
    i = self.parse_path(value, i)
    i = self.parse_query(value, i)
    i = self.parse_fragment(value, i)
}

Uri::host?() String {
    ret authority.host
}

Uri::port?() Int {
    ret authority.port
}

Uri::user?() String {
    ret authority.user
}

Uri::is_reserved(char Byte) Bool {
    ret char == '/'b or char == '#'b or char == '?'b
}

Uri::parse_scheme(value String, start Int) private Int {
    # Parse everything up to the first ':' character
    i var = start
    while (c var = value[i]) and c != ':'b and not self.is_reserved(c) {
        ++i
        c = value[i]
    }
    scheme = value.slice(start, i)
    if value[i] == ':'b {
        ++i
    }
    ret i
}

Uri::parse_authority(value String, ind Int) private Int {
    # Parse up to the first /
    if value[ind] != '/'b or value[ind+1] != '/'b {
        ret ind
    }
    i var = ind + 2
    start var = ind + 2
        
    while (c = value[i]) and c != '@'b and not self.is_reserved(c) {
        ++i
    }
    user var = ''
    if value[i] == '@'b {
        user = value.slice(start, i)
        start = i + 1
    } else {
        i = start
    }
    while (c = value[i]) and c != ':'b and not self.is_reserved(c) {
        ++i
    }
    host var = ''
    if value[i] == ':'b or value[i] == '/'b {
        host = value.slice(start, i)
        start = i + 1
    } else {
        i = start
    }
    while (c = value[i]) and not self.is_reserved(c)  {
        ++i
    }
    port = value.slice(start, i)
    authority = Authority(user, host, port.int)
    ret i
}

Uri::parse_path(value String, start Int) private Int {
    # Parse to the first ?
    i var = start
    c var Byte
    while (c = value[i]) and (c == '/'b or not self.is_reserved(c)) {
        ++i
    }
    path = Path(value.slice(start, i))
    if c == '?'b {
        ++i
    }
    ret i
}

Uri::parse_query(value String, start Int) private Int {
    # parse to the #
    i var = start
    c var Byte
    while (c = value[i]) and c != '#'b {
        ++i
    }
    query = Query(value.slice(start, i))
    if c == '#'b {
        ++i
    }
    ret i
}

Uri::parse_fragment(value String, start Int) private Int {
    # Parse to the end
    i var = start
    while (c = value[i]) {
        ++i
    }
    fragment = value.slice(start, i)
    ret i
}

