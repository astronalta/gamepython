# Copyright (c) 2010 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

Array[:a] < Object {
    # An array is an integer-indexed, dynamically resizable container.  Items
    # can be accessed by their index in linear time.  Every index in the array
    # is considered valid, with empty indices returning nil.  The 'count'
    # property is simply the greatest index of any element in the array, plus
    # one.

    capacity Int
    # Returns the capacity of this array. 

    count Int
    # Returns the number of elements in this array.

    @init(capacity Int) native {
        # Creates a new buffer with capacity for 'capacity' elements.
        # Regardless of the initial capacity, the number of elements in the
        # array will always be zero after construction.
    }

    @destroy() native {
        # Releases memory used by the array.
    }

    @index(index Int) native :a {
        # Returns the element at 'index'.  If 'index' is greater than 'count',
        # this function return nil. 
    }

    @insert(index Int, element :a) native {
        # Sets the element at 'index' to 'element'.  If 'index' is greater than
        # 'count', then the array will be resized to accomodate 'index'.
    }

    @add(other Array[:a]) Array[:a] {
        # Concatenates this array with 'other', and returns the result
        out = Array[:a](count+other.count)
        i mutable = 0
        while i < count {
            out[i] = self[i]
            ++i
        }
        j mutable = 0
        while j < other.count {
            out[i] = other[j]
            ++j
            ++i
        }
        ret out
    }

    count=(count Int) {
        # Sets the number of elements in the array.  If 'count' is greater than
        # the size of the array, then the size of the array is increased, with
        # new array buckets being set to nil.  If 'count' is less than the size
        # of the array, then the size of the array is reduced, and elements
        # belonging to removed buckets are freed.
    }

    capacity=(capacity Int) {
        # Reserves at least storage for at least 'capacity' elements.  If
        # 'capacity' is smaller than the current capacity, the array will
        # shrink to the number of elements in the array.  Setting capacity to a
        # value less than 'count' will result in 'capacity' being set equal to
        # 'count'.
    }

    shift(element :a) {
        # Adds 'element' to the beginning of the array, and shifts all other    
        # elements up by one index.
        i mutable = count
        while i > 0 {
            self[i] = self[i-1]
            --i 
        }
        self[0] = element
    }

    unshift() :a {
        # Removes the first element from the array, and shifts all other 
        # elements down by one index.
        out = self[0]
        i mutable = 0
        while i < count {
            self[i] = self[i+1]
            ++i
        }
        count = count-1
        ret out
    }

    push(element :a) {
        # Adds 'element' to the end of the array.
        self[count] = element
    }
    
    append(element :a) {
        # Adds 'element' to the end of the array (synonym for 'push')
        self.push(element)
    }

    pop() :a {
        # Removes the element at the end of the array, and reduces the count.
        element = self[count-1]
        count = count-1
        ret element
    }

    first?() :a {
        # Returns the element at index 0
        ret self[0]
    }

    last?() :a {
        # Returns the last element in the array.
        ret self[count-1]
    }

    prefix(end Int) Array[:a] {
        # Returns a new array containing all of the elements from the beginning
        # of the array to the element before 'end'
        ret self.slice(0, end)
    }

    suffix(begin Int) Array[:a] {
        # Returns a new array containing elements starting at 'begin' and
        # continuing to the end of this string.
        ret self.slice(begin, count)
    }

    slice(begin Int, end Int) Array[:a] {
        # Returns a new array containing the elements starting at 'begin' and
        # ending at the element before 'end'. 
        end2 = end.min(count)
        begin2 = begin.min(end2).max(0) 

        out = Array[:a]((end2-begin2).max(8))
        i mutable = begin2
        while i < end2 {
            out.push(self[i])
            ++i
        }
        ret out
    }

    compact!() {
        # Removes any nil elements in the array, and shifts the remaining
        # elements down into a contiguous block.
        last mutable = 0
        i mutable = 0
        while i < count {
            element = self[i]
            if i != last and element {
                self[last] = element
                ++last
            }
            ++i
        }
        count = last
    }

    empty?() Bool {
        # Returns true if the array is empty
        ret count == 0
    }

    clear() native {
        # Clears all the items from this array.
    }

    iter() ArrayIter[:a] {
        # Returns an iterator over the elements in this array
        ret ArrayIter[:a](self)
    }

    each(fn Func::EachFunc[:a]) {
        for elem in self {
            fn(elem)
        }
    }

    #str?() native String {
        # Returns a string representation of this array.
    #}
}

ArrayIter[:a] < Object {
    # This iterator returns each of the elements in the array it points to in
    # sequence.  The iterator makes no guarantee on ordering if the array is
    # modified during iteration, but the iteration is guaranteed to terminate 
    # and will not result in a fault.

    array private Array[:a]
    index private = 0

    @init(coll Array[:a]) {
        # Initializes the iterator.  The iterator will iterate over the items 
        # in 'coll'.
        array = coll
    }

    more?() Bool {
        # Returns true if there are more elements in the array.
        ret index < array.count
    } 
    
    next() :a {
        # Returns the next element in the array, or nil if there are no more 
        # elements.
        val = array[index]
        ++index
        ret val
    } 

    item?() :a {
        ret array[index]
    }

    iter() ArrayIter[:a] {
        ret self
    }
}
