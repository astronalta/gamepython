# Copyright (c) 2010 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

Queue[:a] < Object {
    # Implementation of an array-based FIFO queue (uses a circular buffer that
    # resizes then the queue is full).
    
    capacity immutable Int
    # Returns the capacity of this queue.

    front immutable Int
    # Index pointing to the front of the queue.
    
    back immutable Int
    # Index pointing to the back of the queue.

    count immutable Int
    # Number of elements in the queue.
    
    @init(capacity Int) native {
        # Creates a new queue with capacity for 'capacity' elements.  The queue
        # will resize beyond 'capacity' elements if necessary; the capacity is
        # just a hint to the implementation.
    }

    @destroy() native {
        # Releases memory used by the queue.
    }

    enq(element :a) native {
        # Adds an element at the end of the queue.
    }

    deq() native :a {
        # Removes and returns the element at the head of the queue.
    }

    first?() native :a {
        # Returns the first element in the queue.
    }

    last?() native :a {
        # Returns the last element in the queue.
    }
    
    empty?() Bool {
        # Returns true if the queue is empty.
        ret count == 0
    }

    iter() QueueIter[:a] {
        ret QueueIter[:a](self)
    }
}

QueueIter[:a] < Object {
    # This iterator returns each of the elements in the queue it points to in
    # sequence, from the first element in the queue (i.e., the next to be
    # dequeued) to the last element in the queue.

    queue private Queue[:a]
    index private Int
    count private = 0 
    
    @init(coll Queue[:a]) {
        # Initializes the iterator.  The iterator will iterate over the items
        # in 'coll.'
        queue = coll
        index = coll.front
        count = 0
    }
    
    more?() native Bool {
        # Returns true if there are more elements in the queue.
    }
    
    next() native :a {
        # Returns the next element in the array, or nil if there are no more
        # elements.
    }
}
