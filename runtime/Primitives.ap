# Copyright (c) 2010 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

Int < Value {
#    @init(float Float) native
    @init(str String) native
    @add(other Int) native Int
    @sub(other Int) native Int
    @mul(other Int) native Int
    @div(other Int) native Int
    @mod(other Int) native Int
    @equal(other Int) native Bool
    @less(other Int) native Bool
    @compl() native Int
    str?() native String

    max(other Int) Int {
        if other > self {
            ret other
        } else {
            ret self
        }
    }

    min(other Int) Int {
        if other < self {
            ret other
        } else {
            ret self
        }
    }
}

Float < Value {
#    @init(int Int) native
    @init(str String) native
    @add(other Float) native Float
    @sub(other Float) native Float
    @mul(other Float) native Float
    @div(other Float) native Float
    @mod(other Float) native Float
    @equal(other Float) native Bool
    @less(other Float) native Bool
    @compl() native Float
    str?() native String

    max(other Float) Float {
        if other > self {
            ret other
        } else {
            ret self
        }
    }

    min(other Float) Float {
        if other < self {
            ret other
        } else {
            ret self
        }
    } 
}

Char < Value {
    @init(str String) native
    @add(other Char) native Char
    @sub(other Char) native Char
    @mul(other Char) native Char
    @div(other Char) native Char
    @mod(other Char) native Char
    @equal(other Char) native Bool
    @less(other Char) native Bool
    @compl() native Char
    str?() native String
}

Bool < Value {
}

Byte < Value {
}

