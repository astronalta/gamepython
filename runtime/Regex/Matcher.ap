# Copyright (c) 2010 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

Matcher < Object {
    # Matches strings with regular expressions.  The @match operator returns
    # a match object if a match is found; otherwise, nil is returned.  
    
    thread = Array[Thread]() 
    # An array of threads, with at most one for each state in the NFA.  This
    # array is equal in length to the size of the NFA; the individual threads
    # are used to store the locations of running threads within the NFA. 

    regex Regex 
    # The regular expression to use for matching.

    @init(re Regex) {
        # Initializes a new matcher with the given regular expression.
        regex = re
        # thread.capacity = 
    }

    @match(str String) Match {
        # Returns a match object is 'str' matches 'self'.  Otherwise, returns
        # nil.  The match object contains information about the match,
        # including the location of submatches.

        for char in str {
            for th in thread {
                instr = regex.instr(th.index)
                match instr.type {
                InstrType::NOP:
                    
                InstrType::CHAR:    
                    # Regular character instruction

                InstrType::MATCH:
                    # Match instruction

                InstrType::SPLIT:
                    # Split instruction

                InstrType::JUMP:
                    # Jump instruction
                }
            }
        }
    }
}

Thread < Object {
    # A thread used by the regular expression virtual machine.  Logically, this
    # is a pointer to an instruction in the regular expression's instruction
    # list.

    index Int
    # Index of the instruction this thread is executing.

    next Thread
    # The next thread in the current thread list.

    @init(ind Int) native Int {
        # Initializes the regex thread.
    }

    begin(index Int) Int {
        # Returns the beginning of submatch with index 'index.'
    }

    end(index Int) Int {
        # Returns the end of the submatch with index 'index.'
    }
}

Match < Object {

    thread private Thread
}

Thread < Object {
    # An NFA thread for the regex virtual machine.  This is roughly a replacement
}

