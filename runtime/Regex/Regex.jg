# Copyright (c) 2010 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

Span < Value {
    # A range of characters matched by a regex or a subgroup, starting from the
    # index of the first character matched and ending at 1+ the index of the
    # last character matched.
    start Int
    end Int
}

Match < Object {
    # Contains regular expression match and submatch locations.  A match object
    # is returend by Regex.search and Regex.match whenever a string matches the
    # regular expression.
    MAXGROUPS = 10

    @init() native {
        # Initializes a new match object.
    }

    start?() Int {
        # First character of the matched string. 
        ret self.group(0).start
    }

    end?() Int {
        # Last character of the matched string.
        ret self.group(0).end
    }

    group(index Int) native Span {
        # Returns the span of characters matched by subgroup 'index.' The first
        # group (index 0) contains the characters spanned by the entire match. 
    }

    @index(index Int) Span {
        # An alias for Match.group.
        ret self.group(index)
    }
}

Regex < Object {
    # A compiled representation of a regular expression.  Regular expressions
    # are used to match arbitrary strings.

    @init(regex String) native {
        # Constructs a new regular expression from the given string.
    } 

    @destroy() native {
        # Frees the regular expression.
    }

    @match(str String) native Match {
        # Returns true if this regular expression matches 'str'
    }

    error?() native String {
        # Returns nil if there is no error code; otherwise, returns the error
        # string.
    }

    dump() native {
    }
}

