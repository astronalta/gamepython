# Copyright (c) 2010 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

Int < Value {
    # Signed, 64-bit integer.  This class will always have 64 bits of
    # precision, regardless of the platform.

    @init() native
    @add(other Int) native Int
    @sub(other Int) native Int
    @mul(other Int) native Int
    @div(other Int) native Int
    @mod(other Int) native Int
    @equal(other Int) native Bool
    @less(other Int) native Bool
    @neg() native Int
    @compl() native Int

    str() String { ret self.str }
    str?() native String {
        # Returns the string representation of 'self'        
    }

    max(other Int) Int {
        # Returns the maximum of 'self' and 'other'
        if other > self {
            ret other
        } else {
            ret self
        }
    }

    min(other Int) Int {
        # Returns the minimum of 'self' and 'other'
        if other < self {
            ret other
        } else {
            ret self
        }
    }

    exp() Float { ret self.exp }
    exp?() native Float {
        # Returns the exponential of 'self'
    }

    ln() Float { ret self.ln }
    ln?() native Float {
        # Returns the natural logarithm of 'self'
    }

    log() Float { ret self.log }
    log?() native Float {
        # Returns the base-10 logarithm of 'self'
    }
    
    sqrt() Float { ret self.sqrt }
    sqrt?() native Float {
        # Returns the square root of 'self'
    }
    
    ceil() Float { ret self.ceil } 
    ceil?() native Float {
        # Returns the smallest integer not less than 'self'
    }
    
    floor() Float { ret self.floor }
    floor?() native Float {
        # Returns the largest integer not greater than 'self'
    }

    abs() Int { ret self.abs }
    abs?() native Int {
        # Returns the absolute value of 'self'
    }
    
    sin() Float { ret self.sin }
    sin?() native Float {
        # Returns the sine of 'self'
    }

    cos() Float { ret self.cos }
    cos?() native Float {
        # Returns the cosine of 'self'
    }

    tan() Float { ret self.tan }
    tan?() native Float {
        # Returns the tangent of 'self'
    }

    arcsin() Float { ret self.arcsin }
    arcsin?() native Float {
        # Returns the arc-sine of 'self'
    }

    arccos() Float { ret self.arccos }
    arccos?() native Float {
        # Returns the arc-cosine of 'self'
    }

    arctan(value Float) Float { ret self.arctan?(value) }
    arctan?(value Float) native Float {
        # Returns the arc-tangent of 'self'/'value'
    }

    sinh() Float { ret self.sinh }
    sinh?() native Float {
        # Returns the hyperbolic sine of 'self'
    }

    cosh() Float { ret self.cosh }
    cosh?() native Float {
        # Returns the hyperbolic cosine of 'self'
    }

    tanh() Float { ret self.tanh }
    tanh?() native Float {
        # Returns the hyperbolic tangent of 'self'
    }
}

Float < Value {
    # Double-precision, 64-bit floating point number.  This class will always
    # be a 64-bit floating point number, regardless of the platform.

    @init() native
    @add(other Float) native Float
    @sub(other Float) native Float
    @mul(other Float) native Float
    @div(other Float) native Float
    @equal(other Float) native Bool
    @less(other Float) native Bool
    @neg() native Float

    str() String { ret self.str }
    str?() native String {
        # Returns the string representation of 'self'
    }

#    max(other Float) Float {
#        # Returns the maximum of 'self' and 'other'
#        if other > self {
#            ret other
#        } else {
#            ret self
#        }
#    }
#
#    min(other Float) Float {
#        # Returns the minimum of 'self' and 'other'
#        if other < self {
#            ret other
#        } else {
#            ret self
#        }
#    } 

    exp() Float { ret self.exp }
    exp?() native Float {
        # Returns the exponential of 'self'
    }

    ln() Float { ret self.ln }
    ln?() native Float {
        # Returns the natural logarithm of 'self'
    }

    log() Float { ret self.log }
    log?() native Float {
        # Returns the base-10 logarithm of 'self'
    }
    
    sqrt() Float { ret self.sqrt }
    sqrt?() native Float {
        # Returns the square root of 'self'
    }
    
    ceil() Float { ret self.ceil } 
    ceil?() native Float {
        # Returns the smallest integer not less than 'self'
    }
    
    floor() Float { ret self.floor }
    floor?() native Float {
        # Returns the largest integer not greater than 'self'
    }

    abs() Float { ret self.abs }
    abs?() native Float {
        # Returns the absolute value of 'self'
    }
    
    sin() Float { ret self.sin }
    sin?() native Float {
        # Returns the sine of 'self'
    }

    cos() Float { ret self.cos }
    cos?() native Float {
        # Returns the cosine of 'self'
    }

    tan() Float { ret self.tan }
    tan?() native Float {
        # Returns the tangent of 'self'
    }

    arcsin() Float { ret self.arcsin }
    arcsin?() native Float {
        # Returns the arc-sine of 'self'
    }

    arccos() Float { ret self.arccos }
    arccos?() native Float {
        # Returns the arc-cosine of 'self'
    }

    arctan(value Float) Float { ret self.arctan?(value) }
    arctan?(value Float) native Float {
        # Returns the arc-tangent of 'self'/'value'
    }

    sinh() Float { ret self.sinh }
    sinh?() native Float {
        # Returns the hyperbolic sine of 'self'
    }

    cosh() Float { ret self.cosh }
    cosh?() native Float {
        # Returns the hyperbolic cosine of 'self'
    }

    tanh() Float { ret self.tanh }
    tanh?() native Float {
        # Returns the hyperbolic tangent of 'self'
    }
}

Char < Value {
    # Represents a single character.  The size of this type is always 64-bits.
    # While a String is logically a sequence of characters, its internal
    # representation of a character may is smaller than 64-bits for efficiency,
    # because the String class uses UTF-8 encoding.

    @init() native
    @equal(other Char) native Bool
    @less(other Char) native Bool

    str() String { ret self.str }
    str?() native String {
        # Returns a string representation of this character.
    }

    is_alnum?() native Bool {
        # Returns true if 'self' is a letter or a digit.
    }

    is_alpha?() native Bool {
        # Returns true if 'self' is an uppercase or lowercase letter.
    }

    is_ctrl?() native Bool {
        # Returns true if 'self' is a control character.
    }

    is_digit?() native Bool {
        # Returns true if 'self' is a decimal digit.
    }

    is_lower?() native Bool {
        # Returns true if 'self' is a lowercase letter.
    }

    is_upper?() native Bool {
        # Returns true if 'self' is an uppercase letter.
    }

    is_print?() native Bool {
        # Returns true if 'self' is a printable character.
    }

    is_graph?() native Bool {
        # Returns true if 'self' is a printable character other than a space.
    }

    is_xdigit?() native Bool {
        # Returns true if 'self' is a hexadecimal digit.
    }

    lower?() native Char {
        # Returns the upper-case equivalent of 'self'.
    }

    upper?() native Char {
        # Returns the lower-case equivalent of 'self'.
    }
}

Bool < Value {
    # Holds a boolean value, either 'true' or 'false'.
    
    str?() native String {
        # Returns the string representation of 'self'
    }
    
}

Byte < Value {
    # Unsigned, 8-bit integer value.   A byte is always 8-bits long, regardless
    # of the platform.
    is_utf8_start?() native Bool {
        # Returns true if the byte is the beginning of a UTF-8 code point.
    }

    @equal(other Byte) native Bool
    @less(other Byte) native Bool
}

Any < Object {
    # The 'Any' type is a container for any value or reference type.  For
    # reference types, storing an object as an 'Any' just does type erasure.
    # For value types, it also boxes the value type inside a reference type,
    # so that it can be passed around by pointer.
}

