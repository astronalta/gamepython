# Copyright (c) 2010 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

String < Object {
    # Represents an immutable character string.  New strings can be created
    # via a substring or concatenation operation on an existing string.

    @index(index Int) native Char {
        # Returns the character at index index.  If the index refers to a
        # location beyond the length of the string, then
    }

    @add(string String) native String {
        # Concatenates this string with 'string'.
    }

    @equal(string String) native Bool {
        # Returns true if this string is equal to 'string'.
    }

    @less(string String) Bool {
        # Returns true if this string is lexically less than 'string'.
        i = 0
        while i < self.length or i < string.length {
            if self[i] < string[i] {
                ++i
            } else {
                ret false
            }
        }
        ret true
    }

    length?() native Int {
        # Returns the length of the string.
    }

    slice(begin Int, end Int) native String {
        # Returns a new string containing the elements starting at 'begin' and 
        # ending at the character before 'end'.
    }

    prefix(end Int) String {
        # Returns a new string containing elements starting at the beginning of
        # the string and ending at the character before 'end'.
        ret self.slice(0, end)
    }

    suffix(begin Int) String {
        # Return a new string containing elements starting at 'begin' and 
        # continuing to the end of this string.
        ret self.slice(begin, self.length)
    }

    starts_with(string String) Bool {
        # Returns true if this string starts with the exact string specified
        # by 'string'
        if string.length > self.length {
            ret false
        }
        i = 0
        while i < string.length {
            if string[i] != self[i] {
                ret false
            }    
            ++i
        }
        ret true
    }

    ends_with(string String) Bool {
        # Returns true if this string ends with the exact string specified by
        # 'string'
        if string.length > self.length {
            ret false
        }
        i = 1
        while i <= string.length {
            if string[-i] != self[-i] {
                ret false
            } 
            ++i
        }
        ret true
    }
    
    uppercase?() native String {
        # Returns an uppercase version of this string.
    }

    lowercase?() native String {
        # Returns a lowercase version of this string.
    }

    str?() String {
        ret self
    }

    int?() native Int {
        # Converts the string into an integer.  If the string is not a valid 
        # number, then zero is returned.
    }

    float?() native Float {    
        # Converts the float into an integer.  If the float is not a valid
        # number, then zero is returned.
    }

    char?() Char {
        # Converts the string to a character by returning the first character
        # in the string.
        ret self[0]
    }
    
    hash?() native Int {
        # Returns the hash code for this string.
    }

    iter() StringIter {
        # Returns an iterator over the characters in this string
        ret StringIter(self)
    }
}

StringIter < Object {
    # This iterator returns each of the characters in the string it points to
    # in sequence.

    string private String
    index private = 0

    @init(str String) {
        # Initializes the iterator; the iterator will iterate over the
        # characters in 'str'.
        string = str
    }
    
    more?() Bool {
        # Returns true if there are more elements in the array.
        ret index < string.length
    }

    next() Char {
        # Returns the next character in the string.
        val = string[index]
        ++index
        ret val
    }

    iter() StringIter {
        ret self
    }
}
