# Copyright (c) 2012 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

Iterable[:a] < Interface {
    # A Seq (short for sequence) defines an iterator over a sequence of values
    # of the same type.
    iter() Iter[:a] {
        # Returns an iterator over the values in the array.
    }
}

Indexable[:k,:v] < Interface {
    # An Indexable returns a value when given a key.
    @index(key :k) :v {
        # Returns the value mapped to 'key.' 
    }
}

Mapper[:k,:v] < Interface {
    # A Mapper is used to define mapping a key to a value.  Any Mapper can be
    # initialized using the map literal consructor, {}.
    @insert(key :k, value :v) {
        # Updates the value mapped to key 'key.' 
    }
}

Appendable[:a] < Interface {
    # An Appendable can have values appended via the append function. 
    append(value :a) {
        # Appends 'value' to the object..
    } 
}

Iter[:a] < Interface {
    # An iterator is an object that generates a sequence of values of the same
    # type.
    more?() Bool {
        # Returns true if there are more elements in the array.
    }

    next() :a {
        # Returns the next element in the array, or nil if there are no more
        # elements.
    }
}
