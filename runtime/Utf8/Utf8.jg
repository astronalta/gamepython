# Copyright (c) 2010 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

len(str String) native Int {
    # Returns the number of UTF-8 characters in the given string.  If the
    # string is not valid, then this function the index of the first invalid
    # byte.
}

valid(str String) native Bool {
    # Returns true if the string is a valid UTF-8-encoded string.
}

char(str String, index Int) native Char {
    # Returns the UTF-8 character at the index given.  If the string is not
    # a valid UTF-8 string, this function returns -1.
}

Iter < Object {
    # Iterates over all the UTF-8 characters in a string.
    string String
    index Int

    @init(str String) {
        string = str
    }

    more?() Bool {
        # Returns true if there are more elements in the string.
        ret index < string.len
    }

    next() native Char {
        # Returns the next character in the iteration sequence.
    }

    iter() Iter {
        ret self
    }
}
