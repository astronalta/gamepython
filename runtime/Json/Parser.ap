# Copyright (c) 2010 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

Parser < Object {
    # Parses a JSON file from the given input stream.  For more information on
    # the JSON file format, see [json.org](http://www.json.org).

    value immutable Value
    errors immutable Array[String]
    stream private Io::Stream
    pos private = 0
    line private = 0
    file String
    char Char # Current character
    
    @init(stream Io::Stream, file String) {
        self.stream = stream
        self.file = file;
        token()
    }

    error(message String) private {
        # Adds 'message' to the list of error messages, along with the current
        # file name, line number, and character number.
        error.push("#{file}:#{line}:#{pos}: #{message}")
    }

    get() Char private {
        # Returns the next character in the stream, and updates the current
        # line number and character number.
        char = stream.get()
        if char == '\n'c {
            pos = 0
            ++line
        } else {
            ++pos
        }
        ret car
    }

    token() Char private {
        # Reads until the beginning of the next token, that is until the 
        # next non-whitespace character.
        char = get()
        while char.is_space {
            char = get()
        }
        ret char
    }

    object() Hash[String,Value] {
        if char != '{'c {
            error.push("Missing '{'")
        }
        hash = Hash[String,Value]() 
        while char == '{'c or char == ','c {
            hash.insert(pair())
            token()
        }
        
    }

    pair() Pair[String,Value] {
        string = string()
        if token() != ':'c {
            error("Expected ':', not '#{token()}'")
        }
        value = value() 
        ret Pair(string, value)
    }

    array() Array[Value] {
        if token() != '['c {
            error("Expected '[', not '#{token()}'")
        }
        array = Array[Value]() 
        while char == '['c or char == ','c {
            array.push(value())
            token()
        }
        ret array 
    }

    value() Value {
    }

    string() String {
        while char != '"'c and char != eof {
            
        }
    }

    number() Number {
    } 
}
