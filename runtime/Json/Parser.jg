#Parser < Object {
#    # Parses a JSON file from the given input stream.  For more information on
#    # the JSON file format, see [json.org](http://www.json.org).
#
#    value immutable Value
#    errors immutable Array[String]
#    stream private Io::Stream
#    pos private = 0
#    line private = 0
#    file String
#    char Char # Current character
#}
#    
#Parser::@init(stream Io::Stream, file String) {
#    self.stream = stream
#    self.file = file;
#    token()
#}
#
#Parser::error(message String) private {
#    # Adds 'message' to the list of error messages, along with the current
#    # file name, line number, and character number.
#    errors.push("#{file}:#{line}:#{pos}: #{message}")
#}
#
#Parser::get() Char private {
#    # Returns the next character in the stream, and updates the current
#    # line number and character number.
#    char = stream.get()
#    if char == '\n'c {
#        pos = 0
#        ++line
#    } else {
#        ++pos
#    }
#    ret car
#}
#
#Parser::token() Char private {
#    # Reads until the beginning of the next token, that is until the 
#    # next non-whitespace character.
#    char = self.get()
#    while char.is_space {
#        char = self.get()
#    }
#    ret char
#}
#
#Parser::object() Hash[String,Value] {
#    if char != '{'c {
#        self.error("Missing '{'")
#    }
#    hash = Hash[String,Value]() 
#    while char == '{'c or char == ','c {
#        self.hash.insert(pair())
#        self.token()
#    }
#    
#}
#
#Parser::pair() Pair[String,Value] {
#    string = self.string()
#    if token() != ':'c {
#        error("Expected ':', not '#{token()}'")
#    }
#    value = self.value() 
#    ret Pair(string, value)
#}
#
#Parser::array() Array[Value] {
#    if token() != '['c {
#        self.error("Expected '[', not '#{token()}'")
#    }
#    array = Array[Value]() 
#    while char == '['c or char == ','c {
#        array.push(value())
#        self.token()
#    }
#    ret array 
#}
#
#Parser::value() Value {
#}
#
#string() String {
#    while char != '"'c and char != eof {
#        
#    }
#}
#
#number() Number {
#} 
