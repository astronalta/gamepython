# Copyright (c) 2010 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

Manager < Object {
    # The Io::Manager coordinates coroutines that have blocked waiting for I/O,
    # and provides the core asynchronous I/O implementation.  The Io::Manager is
    # resposible for running an Jogo program's event loop; the Io::Manager is 
    # started first by the runtime, and the the main() coroutine is launched
    # and added to the scheduled task queue.  
    # 
    # Arbitrary tasks (named coroutines) can be added to the task queue.  When
    # a task is added to the task queue, it may be run the next time the
    # current coroutine yields or blocks on I/O.   When a task has finished
    # running, the task is removed from the task queue. 

    scheduled Queue[Coroutine]
    # Set of tasks that are active and waiting to be scheduled.

    handle Int
    # Handle to the file descriptor that is used for OS-level polling.  On
    # BSD-based systems, it is a kqueue fd; for Linux, it is an epoll fd; and
    # for Windows, it is an I/O completion port.

    waiting private Int
    # Number of coroutines waiting on I/O.  FixMe: Make this a set of waiting
    # coroutines rather than a single int.

    iobytes immutable Int
    # Number of bytes read by the last I/O operation, if available.

    @init() native private {
        # Initializes a new manager.  Most applications need only one I/O
        # manager, which can be accessed via the Event::manager() constant.
    }
    
    @destroy() native {
        # Destroys the I/O manager, and releases the OS resources used for
        # event polling.
    }

    task(task Coroutine) {
        # Adds this task to the list of tasks waiting to be scheduled.  The
        # task will be run when all other tasks are blocked or if a task yields
        # and the task is first on the task list.  If the task blocks to do
        # I/O, it will yield back to the I/O manager, which will schedule
        # another task.  If no tasks are available, then the I/O manager will
        # wait on I/O.
        scheduled.enq(task)
    }

    run() {
        # Run the event loop.  Select a coroutine from the 'scheduled' queue,
        # and begin executing it.  If there are no more tasks, and no
        # outstanding I/O requests, then return.
        while waiting > 0 {
            # Dequeue scheduled tasks until the entire queue is empty.  At that
            # point, all coroutines have either exited, or are waiting on some
            # external event (file I/O, timer, etc.)
            while scheduled.count > 0 {
                next = scheduled.deq()
                next.resume()
                if next.status == CoroutineStatus::SUSPENDED {
                    scheduled.enq(next)
                }
            }
        
            # All coroutines are sleeping; poll.
            poll()
        }
    }

    poll() native {
        # Poll for an I/O request.  This function will block until an I/O
        # operation finishes.
    }

    shutdown() native {
        # Shuts down the I/O manager; no additional I/O operations can be done
        # after this method is called.
    }
}

