# Copyright (c) 2010 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

StreamStatus = OK | ERROR | EOF
# Encodes the current status of the I/O stream.  OK: Stream is in the normal 
# state and is ready for I/O.  ERROR: The stream is in an invalid state, either
# because a socket or file descriptor is closed, or due to an error raised by
# the underlying file descriptor.  EOF: The stream is at the end of the file,
# and no more bytes may be read.

StreamMode = ASYNC | BLOCKING
# The stream mode manages how I/O is handled by the runtime.  ASYNC: Stream
# read/write operations return immediately, but the I/O operation will not
# finish until later; the wait() function must be called to retrieve the stream
# status.  SYNC: Stream operations block the current coroutine.  BLOCKING:
# Stream operations block the process.  SYNC is the default.  BLOCKING mode is
# not recommended for most applications.

StreamType = FILE | SOCKET | CONSOLE
# The type of underlying file descriptor that is attached to the stream.

Stream < Object {
    # This object is used to perform buffered character I/O on a file.  It can
    # be used to read from any device or input that the OS supports for the
    # underlying handle type, including sockets, files, pipes, etc.  Stream 
    # also implements the Iter[Byte] interface, so that it can be used with
    # functions that accept iterators.

    handle Int
    # Opaque handle to the underlying file descriptor.

    read_buf private Buffer
    # Bytes buffered for input.  The stream buffers input bytes to avoid 
    # invoking a system call for each read.

    write_buf private Buffer
    # Bytes buffered for output.  The stream buffers output bytes to avoid 
    # invoking a system call for each write.

    status StreamStatus
    # The current status of the stream; either OK, ERROR, or EOF.

    type StreamType
    # True if the stream is a console handle.    

    error Int
    # The last error raised by this stream.  The error code is opaque and
    # OS-specific.  To format the error message for this error code, use
    # Os::strerror.

    mode mutable StreamMode
    # The current mode of the stream, as described above; either SYNC, ASYNC,
    # or BLOCKING.  Controls the type of I/O that will be executed for the 
    # stream.

    @init(desc Int, type StreamType) native {
        # Initializes a new stream, with 'handle' being an opaque pointer to
        # the OS file descriptor.  Note that if 'handle' is invalid, then
        # subsequent reads and writes will fail, and 'err' will be set.
    }

    @destroy() {
        # Closes the file if it is still open.
        self.close()
    }

    read(buffer Buffer) native {
        # Reads data into 'buffer', and sets the 'count' field of buffer to the
        # number of bytes read.  This function will read up 'n' bytes, where
        # 'n' is equal to the 'length' field of 'buffer'.  If data is already
        # buffered to the internal buffer, that data will be copied into
        # 'buffer' first before an attempt to read more bytes from the OS is
        # made.  This function implements an unbuffered read; the bytes
        # returned by the OS-level read call go directly into the buffer.
    }

    write(buffer Buffer) native {
        # Writes the data in 'buffer', and blocks until all the bytes are
        # written or the 'err' flag is set.  If data is already buffered in the
        # internal buffer, then 'flush()' will be called before writing
        # 'buffer' to the output stream.  This function implements an
        # unbuffered write; the bytes will go directly to the OS-level write
        # system call.
    }

    scan(delim String) native String {
        # Reads all characters up to and including the first instance of
        # 'char'.  Returns a string containing the characters read.
    }

    print(string String) native {
        # Writes the characters in 'string' to the file.  The string is not
        # guaranteed to be written to the output stream until 'flush()' is
        # called.
    }

    scanln() String {
        # Reads in a line up to the ending '\n'
        ret self.scan('\n')
    }

    println(string String) {
        # Prints a string followed by '\n', and flushes the output.
        self.print(string)
        self.put('\n'b)
        self.flush()
    }

    get() native Byte {
        # Returns the next byte in the input stream. 
    }

    getbb() native Byte {
        # Reads a byte from the stream in binary format.
    }
    
    getib() native Int {
        # Reads an int from the stream in binary format.
    }

    getsb() native String {
        # Reads a string from the stream in binary format.
    }

    put(char Byte) native {
        # Writes a byte to the output buffer. The character is not guaranteed
        # to be written to the output stream until 'flush()' is called.
    }

    putbb(char Byte) native {
        # Writes a byte to the stream in binary format.
    }
    
    putib(int Int) native {
        # Writes an int to the stream in binary format.
    }

    putsb(string String) native {
        # Writes a string to the stream in binary format.
    }

    peek() native Byte {
        # Reads a character, but does not remove it from the internal buffer.
        # Call 'get' to read the next character and remove it.
    }
    
    flush() native {
        # Writes any characters in the internal output buffer to the output
        # stream.
    }

    pipe(input Stream) native {
        # Reads all bytes from 'input' and outputs to this stream.
    }
    
    close() native {
        # Calls 'flush()' then closes the file descriptor, so that no more
        # characters may be read or written.
    }
    
    end() native {
        # Writes the EOF, if this is a socket stream.  This closes the socket
        # stream for writing, but does not close it for reading.
    }

    readall() native String {
        # Reads until EOF and returns the result as a string.
    }

    iter() Stream {
        # Support for using the stream as an iterator.
        ret self
    }

    more?() Bool {
        # Returns true if there are more characters in the stream.
        ret status == StreamStatus::OK
    }
    
    next() Byte {
        # Returns the next byte in the iterator.
        ret self.get()
    }
}
