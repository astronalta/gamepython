# Struct.ap

Buffer[V] < Object {
    @insert(key Int, val V)
    @index(key Int)
}

Array[V] < Object {
    @insert(key Int, val V)
    @index(key Int) V
    count() Int
    iter() Iterator[Pair[K,V]]
}

List[V] < Struct {
    head!(val V)
    head?() V
    tail!(val V)
    tail?() V
    count() Int
    iter() Iterator[V]
}

Tree[K,V] < Object {
    @init(comp Comparator)
    @insert(key K, val V)
    @index(key K) V
    count() Int
    iter() Iterator[K,V]
}

Hash[K,V] < Object {
    @init(hash Hasher)
    @insert(key K, val V)
    @index(key K) V
    count() Int
    iter() Iterator[K,V]
}

