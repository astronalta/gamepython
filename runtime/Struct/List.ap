# Copyright (c) 2010 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a 
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation 
# the rights to use, copy, modify, merge, publish, distribute, sublicense, 
# and/or sell copies of the Software, and to permit persons to whom the 
# Software is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in 
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR 
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

ListNode[V] < Value {
    @init(value Data, next ListNode[V], prev ListNode[V])
}

List[V] < Object {
    # Linked list collection implementation.  Provides an ordered, non-random-access
    # collection implementation that can grow dynamically.  Elements may be added
    # to the beginning or end of 'List' collections, because the implementation is
    # a doubly-linked list.  Supports iteration and O(1) lookup for the head and 
    # tail.

    head private ListNode[V] # Head of the list
    tail private ListNode[V] # Tail of the list
    count readonly = 0

    @init(coll Iterable[V]) {
        # Initializes the list by inserting elements from 'coll' into the list 
        # starting at the head.

        for i in coll {
            self.append(i)
        }
    } 

    head?() V {
        # Returns the data element at the head of the list.
        return head.data
    }

    tail?() V {
        # Returns the data element at the end of the list.
        return tail.data
    }

    head!(val V) {
        # Inserts 'val' at the start of the list, making 'val' the new head.
        tail.next = ListNode[V](val, default, tail)
        tail = tail.next
        count++
    }

    tail!(val V) {
        # Inserts 'val' at the end of the list, making 'val' the new tail.
        head.prev = ListNode[V](val, head, default)
        head = head.prev
        count++
    }

    append(coll Iterable[V]) {
        # Inserts the items in 'coll' to the end of this list.
        for i in coll {
            self.tail!(i)
        }
    }

    prepend(coll Iterable[V]) {
        # Inserts the items in 'coll' at the head of this list.
        for i in coll {
            self.head!(i)
        }
    }
}
