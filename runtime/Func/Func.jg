# Copyright (c) 2010 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Common higher-order functional routines

take(seq Iterable[:a], num Int) Array[:a] {
    # Takes the up to the first 'num' elements of the given sequence, and
    # returns them in Array.
    i mutable = 0
    it = seq.iter()
    out = Array[:a](num)
    while i < num and it.more {
        out.append(it.next())
        ++i
    }
    ret out
}

count(seq Iterable[:a]) Int {
    # Returns the number of elements in the given sequence.
    i mutable = 0
    it = seq.iter()
    while it.more {
        ++i
        it.next()
    }
    ret i
}

array(seq Iterable[:a]) Array[:a] {
    # Takes the elements from 'seq' and puts them into an array.
    it = seq.iter()
    out = Array[:a](0)
    while it.more {
        out.append(it.next())
    }
    ret out
}

MapFunc[:i,:o] < Interface {
    @call(input :i) :o {}
}

map(seq Iterable[:a], fn MapFunc[:a,:b]) Array[:b] {
    out = Array[:b](0)
    for elem in seq {
        out.append(fn(elem))
    }
    ret out
}

FoldFunc[:a,:e] < Interface {
    @call(acc :a, elem :e) :a {}
}

fold(list Iterable[:e], fn FoldFunc[:a,:e], init :a) :a {
    acc mutable = init
    for elem in list {
        acc = fn(acc,elem)
    }
    ret acc 
} 












