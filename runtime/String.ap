# Copyright (c) 2010 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

String < Object {
    # Represents an immutable character string.  New strings can be created
    # via a substring or concatenation operation on an existing string.
     
    @index(index Int) native Char {
        # Returns the character at index index.  If the index refers to a
        # location beyond the length of the string, then
    }

    @plus(string String) native String {
        # Concatenates this string with 'string'.
    }

    length?() native Int {
        # Returns the length of the string.
    }

    slice(begin Int, end Int) native String {
        # Return a new string containing the elements starting at 'begin' and 
        # ending at 'end', inclusive.
    }

    starts_with(string String) native Bool {
        # Returns true if this string starts with the exact string specified
        # by 'string'
        return false
    }

    ends_with(string String) native Bool {
        # Returns true if this string ends with the exact string specified by
        # 'string'
        return false
    }
    
    uppercase() native String {
        # Returns an uppercase version of this string.
    }

    lowercase() native String {
        # Returns a lowercase version of this string.
    }

    #slice(range Range) String native
    # Returns a substring using the given range as an index.
}

print(string String) native
