/*
 * Copyright (c) 2010 Matt Fichman
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation 
 * the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the 
 * Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in 
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */  

#ifndef APCHECKER_H
#define APCHECKER_H

#include <apollo.h>

/* Checks the syntax tree generated by the parser */
struct apchecker {
	apunit_t *unit; /* Unit currently being checked */
    apenv_t *env; /* Type environment */
	apsymtab_t *symbols; /* Temporary symbol table variable */
	aptype_t *rets; /* Return type of current function being parsed */
	int error; /* Error flag */
};

apchecker_t *apchecker_alloc();
int apchecker_check(apchecker_t *checker, apenv_t *env);
int apchecker_check_unit(apchecker_t *checker, apunit_t *unit);
void apchecker_unit(apchecker_t *self, apunit_t *unit);
void apchecker_func(apchecker_t *self, apfunc_t *func);
void apchecker_stmt(apchecker_t *self, apstmt_t *stmt);
void apchecker_stmt_block(apchecker_t *self, apstmt_t *stmt);
void apchecker_stmt_return(apchecker_t *self, apstmt_t *stmt);
void apchecker_stmt_decl(apchecker_t *self, apstmt_t *stmt);
void apchecker_stmt_loop(apchecker_t *self, apstmt_t *stmt);
void apchecker_stmt_cond(apchecker_t *self, apstmt_t *stmt);
void apchecker_expr(apchecker_t *self, apexpr_t *expr);
void apchecker_expr_binary(apchecker_t *self, apexpr_t *expr);
void apchecker_expr_member(apchecker_t *self, apexpr_t *expr);
void apchecker_expr_ctor(apchecker_t *self, apexpr_t *expr);
void apchecker_expr_call(apchecker_t *self, apexpr_t *expr);
void apchecker_expr_call_func(apchecker_t *self, apexpr_t *expr);
void apchecker_expr_call_ctor(apchecker_t *self, apexpr_t *expr);
void apchecker_expr_ident(apchecker_t *self, apexpr_t *expr);
void apchecker_var(apchecker_t *self, apvar_t *var);
int apchecker_args(apchecker_t *self, apfunc_t *func, apexpr_t *expr); 
void apchecker_print_params(apchecker_t *self, apvar_t *var);
void apchecker_print_args(apchecker_t *self, apexpr_t *expr);
void apchecker_free(apchecker_t *self);

#endif
