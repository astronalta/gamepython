/* 
 * Reads formatted strings from a text input or binary input stream.
 */
class IO::Reader;

public static uint TEXT=0;
public static uint BINARY=1;

IO::Handle handle;  /* Underlying file descriptor */
uint mode;          /* Binary or text mode */
String delimiter;   /* Delimiter for reading chunks */

/* 
 * Creates a new reader.  Type is one of IO::Reader::Text or IO::Reader::BINARY.
 * In text mode, the reader attempts to read ASCII text, and in binary mode, the
 * reader reads raw bits in host-independent format.
 */
@init(IO::Handle handle, uint mode) {
    self.handle = handle;
    self.mode = mode;
    self.delimiter = " ";
}

/* Returns the delimiter */
delimiter() String;

/* Sets the delimiter */
delimiter!(String delimiter);

/* Returns the file handle associated with this readr */
handle() Handle;

/* Returns the file mode */
mode() uint;

/* Reads until the next newline or end of file */
readln!() String ;

/* Reads a boolean value ('true' or 'false') */
read!() bool;

/* Reads a byte value */
read!() byte;  

/* Reads an unsigned byte value */
read!() ubyte;

/* Reads a short value */
read!() short;

/* Reads an unsigned short value */
read!() ushort;

/* Reads an int value */
read!() int;

/* Reads an unsigned int value */
read!() uint;

/* Reads an long value */
read!() long;

/* Reads an unsigned long value */
read!() ulong;

/* Reads a string */
read!() String; 
